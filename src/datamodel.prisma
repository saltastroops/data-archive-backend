# A data archive user.
type User {
  # Unique user id
  id: ID! @id
  # Family name (surname)
  familyName: String!
  # Given name (first name)
  givenName: String!
  # Username, which must not contain upper case letters
  username: String! @unique
  # Email address
  email: String! @unique
  # Affiliation, such as a university or an institute
  affiliation: String!
  # Password, which must have at least 7 characters
  password: String!
  # Roles, which define the user's permissions
  roles: [Role!] @scalarList(strategy: RELATION)
  passwordResetToken: String @unique
  passwordResetTokenExpiry: DateTime
}

# An enumeration of the user roles, which define the permissions a user has.
enum Role {
  # Administrator with full power
  ADMIN
}

enum DataRequestStatus {
    PENDING
    FAILED
    SUCCESSFUL
}
enum DataCategory {
    ACQUISITION
    ARC
    BIAS
    FLAT
    STANDARD
    METADATA
    SCIENCE
}

enum Telescope {
    LESEDI
    SAAO_1_9
    SALT
}

type Header {
    id: ID! @id  # Header need to have an id since it is referable
    key: String!
    value: String
}

type Person {
    id: ID! @id
    givenName: String!
    familyName: String!
}

type Proposal {
    id: ID! @id
    code: String!
    title: String!
    abstract: String!
    principalInvestigator: Person!
    observations: [Observation!]
}

type Observation {
    id: ID! @id
    name: String!
    startTime: DateTime!
    telescope: Telescope!  # Instruments need some consideration Used by DataFile
    proposal: Proposal
    dataFiles: [DataFile!]!
    publicFrom: DateTime!
}

type DataFile {
    id: ID! @id
    available: Boolean! @default(value: false)
    name: String!
    fitsHeadersURI:  String
    headers: [Header!]!
    previews: [String!]! @scalarList(strategy: RELATION)
    startTime: DateTime
    category: DataCategory!
    observation: Observation
    size: Int
}

type DataRequest {
    id: ID! @id
    user: User!
    madeAt: DateTime!
    parts: [DataRequestPart!]!
    uri: String
}

type DataRequestPart {
    id: ID! @id
    dataFiles: [DataFile!]!
    status: DataRequestStatus! @default (value: PENDING)
    statusReason: String! @default (value: "none")
    uri: String
}