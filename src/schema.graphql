#import * from './generated/prisma.graphql'

#The schema's root query type.
type Query {

#  The currently logged in user. An error is raised if the user is not logged in.
  user: User

#  The data requests made by the currently logged in user, ordered in descending order by the time they were made.
  dataRequests(
#    The maximum number of data requests to return.
    limit: Int

#    The index of the first data request to return.
    startIndex: Int!
  ): [DataRequest!]!

#  Checks if the given token is valid.
  passwordResetTokenStatus(token: String!): Status

  dataFiles (where: String!, columns: [String!]!): [DataFile]
}

#The schema's root mutation type.
type Mutation {
  # TODO UPDATE
#  Register a new data archive user.
#
#  Neither the username nor the email address must be used by another user already.

  signup(
#    Family name ("surname").
    familyName: String!

#    Given name ("first name").
    givenName: String!

#    Username, which must not contain upper case letters.
    username: String!

#    Email address, which will be stored as lower case.
    email: String!

#    Affiliation, such as a university or an institute.
    affiliation: String!

#    Password.
    password: String!
  ): User!

#  Update the data archive user information.
#
#  Neither the username nor the email address updated must be used by another user already.
#  To update the data archive user information, the current password must be provided.
  updateUser(
#    Unique user ID
    id: ID

#    Family name ("surname").
    familyName: String

#    Given name ("first name").
    givenName: String

#    Username, which must not contain upper case letters.
    username: String

#    Email address, which will be stored as lower case.
    email: String

#    Affiliation, such as a university or an institute.
    affiliation: String

#    Password.
    password: String!

#    New password.
    newPassword: String
  ): User!

#  Reset a user's password.
  resetPassword(
#     The new password, which must have at least seven characters.
      password: String!
#     The unique token identifying the user.
      token: String!
      ): User!

#  Request a password reset.
  requestPasswordReset(
#    The email address of the user for whom a password reset request is made.
    email: String!
    ): User!
}


#A data archive user.
type User {

#  User id.
  id: ID!

#  Family name ("surname").
  familyName: String!

#  Given name ("first name").
  givenName: String!

#  Username, which must not contain upper case letters.
  username: String!

#  Email address, which will be stored as lower case.
  email: String!

#  Affiliation, such as a university or an institute.
  affiliation: String!

#  User roles, which defines the user's permissions.
  roles: [Role!]!
}


type Status {
#   Success status.
    status: Boolean!
#   Message is ever the status has one.
    message: String
}

type MetadataItem {
  name: String!
  value: String
}

type DataFile {
    id: ID!
    ownedByUser: Boolean!
    metadata : [MetadataItem!]!
}
