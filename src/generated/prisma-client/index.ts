// Code generated by Prisma (prisma@1.30.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  dataRequest: (where?: DataRequestWhereInput) => Promise<boolean>;
  dataRequestPart: (where?: DataRequestPartWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  dataRequest: (where: DataRequestWhereUniqueInput) => DataRequestPromise;
  dataRequests: (
    args?: {
      where?: DataRequestWhereInput;
      orderBy?: DataRequestOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<DataRequest>;
  dataRequestsConnection: (
    args?: {
      where?: DataRequestWhereInput;
      orderBy?: DataRequestOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => DataRequestConnectionPromise;
  dataRequestPart: (
    where: DataRequestPartWhereUniqueInput
  ) => DataRequestPartPromise;
  dataRequestParts: (
    args?: {
      where?: DataRequestPartWhereInput;
      orderBy?: DataRequestPartOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<DataRequestPart>;
  dataRequestPartsConnection: (
    args?: {
      where?: DataRequestPartWhereInput;
      orderBy?: DataRequestPartOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => DataRequestPartConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createDataRequest: (data: DataRequestCreateInput) => DataRequestPromise;
  updateDataRequest: (
    args: { data: DataRequestUpdateInput; where: DataRequestWhereUniqueInput }
  ) => DataRequestPromise;
  updateManyDataRequests: (
    args: {
      data: DataRequestUpdateManyMutationInput;
      where?: DataRequestWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertDataRequest: (
    args: {
      where: DataRequestWhereUniqueInput;
      create: DataRequestCreateInput;
      update: DataRequestUpdateInput;
    }
  ) => DataRequestPromise;
  deleteDataRequest: (where: DataRequestWhereUniqueInput) => DataRequestPromise;
  deleteManyDataRequests: (
    where?: DataRequestWhereInput
  ) => BatchPayloadPromise;
  createDataRequestPart: (
    data: DataRequestPartCreateInput
  ) => DataRequestPartPromise;
  updateDataRequestPart: (
    args: {
      data: DataRequestPartUpdateInput;
      where: DataRequestPartWhereUniqueInput;
    }
  ) => DataRequestPartPromise;
  updateManyDataRequestParts: (
    args: {
      data: DataRequestPartUpdateManyMutationInput;
      where?: DataRequestPartWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertDataRequestPart: (
    args: {
      where: DataRequestPartWhereUniqueInput;
      create: DataRequestPartCreateInput;
      update: DataRequestPartUpdateInput;
    }
  ) => DataRequestPartPromise;
  deleteDataRequestPart: (
    where: DataRequestPartWhereUniqueInput
  ) => DataRequestPartPromise;
  deleteManyDataRequestParts: (
    where?: DataRequestPartWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  dataRequest: (
    where?: DataRequestSubscriptionWhereInput
  ) => DataRequestSubscriptionPayloadSubscription;
  dataRequestPart: (
    where?: DataRequestPartSubscriptionWhereInput
  ) => DataRequestPartSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type DataRequestStatus = "PENDING" | "FAILED" | "SUCCESSFUL";

export type DataRequestPartOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "status_ASC"
  | "status_DESC"
  | "statusReason_ASC"
  | "statusReason_DESC"
  | "uri_ASC"
  | "uri_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Role = "ADMIN";

export type DataRequestOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "madeAt_ASC"
  | "madeAt_DESC"
  | "url_ASC"
  | "url_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "familyName_ASC"
  | "familyName_DESC"
  | "givenName_ASC"
  | "givenName_DESC"
  | "username_ASC"
  | "username_DESC"
  | "email_ASC"
  | "email_DESC"
  | "affiliation_ASC"
  | "affiliation_DESC"
  | "password_ASC"
  | "password_DESC"
  | "passwordResetToken_ASC"
  | "passwordResetToken_DESC"
  | "passwordResetTokenExpiry_ASC"
  | "passwordResetTokenExpiry_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserCreaterolesInput {
  set?: Role[] | Role;
}

export type DataRequestWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface DataRequestUpdateInput {
  user?: UserUpdateOneRequiredInput;
  madeAt?: DateTimeInput;
  parts?: DataRequestPartUpdateManyInput;
  url?: String;
}

export interface DataRequestPartWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  status?: DataRequestStatus;
  status_not?: DataRequestStatus;
  status_in?: DataRequestStatus[] | DataRequestStatus;
  status_not_in?: DataRequestStatus[] | DataRequestStatus;
  statusReason?: String;
  statusReason_not?: String;
  statusReason_in?: String[] | String;
  statusReason_not_in?: String[] | String;
  statusReason_lt?: String;
  statusReason_lte?: String;
  statusReason_gt?: String;
  statusReason_gte?: String;
  statusReason_contains?: String;
  statusReason_not_contains?: String;
  statusReason_starts_with?: String;
  statusReason_not_starts_with?: String;
  statusReason_ends_with?: String;
  statusReason_not_ends_with?: String;
  uri?: String;
  uri_not?: String;
  uri_in?: String[] | String;
  uri_not_in?: String[] | String;
  uri_lt?: String;
  uri_lte?: String;
  uri_gt?: String;
  uri_gte?: String;
  uri_contains?: String;
  uri_not_contains?: String;
  uri_starts_with?: String;
  uri_not_starts_with?: String;
  uri_ends_with?: String;
  uri_not_ends_with?: String;
  AND?: DataRequestPartWhereInput[] | DataRequestPartWhereInput;
  OR?: DataRequestPartWhereInput[] | DataRequestPartWhereInput;
  NOT?: DataRequestPartWhereInput[] | DataRequestPartWhereInput;
}

export interface DataRequestPartScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  status?: DataRequestStatus;
  status_not?: DataRequestStatus;
  status_in?: DataRequestStatus[] | DataRequestStatus;
  status_not_in?: DataRequestStatus[] | DataRequestStatus;
  statusReason?: String;
  statusReason_not?: String;
  statusReason_in?: String[] | String;
  statusReason_not_in?: String[] | String;
  statusReason_lt?: String;
  statusReason_lte?: String;
  statusReason_gt?: String;
  statusReason_gte?: String;
  statusReason_contains?: String;
  statusReason_not_contains?: String;
  statusReason_starts_with?: String;
  statusReason_not_starts_with?: String;
  statusReason_ends_with?: String;
  statusReason_not_ends_with?: String;
  uri?: String;
  uri_not?: String;
  uri_in?: String[] | String;
  uri_not_in?: String[] | String;
  uri_lt?: String;
  uri_lte?: String;
  uri_gt?: String;
  uri_gte?: String;
  uri_contains?: String;
  uri_not_contains?: String;
  uri_starts_with?: String;
  uri_not_starts_with?: String;
  uri_ends_with?: String;
  uri_not_ends_with?: String;
  AND?: DataRequestPartScalarWhereInput[] | DataRequestPartScalarWhereInput;
  OR?: DataRequestPartScalarWhereInput[] | DataRequestPartScalarWhereInput;
  NOT?: DataRequestPartScalarWhereInput[] | DataRequestPartScalarWhereInput;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface DataRequestPartUpsertWithWhereUniqueNestedInput {
  where: DataRequestPartWhereUniqueInput;
  update: DataRequestPartUpdateDataInput;
  create: DataRequestPartCreateInput;
}

export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  connect?: UserWhereUniqueInput;
}

export interface DataRequestPartUpdatedataFilesInput {
  set?: String[] | String;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  familyName?: String;
  familyName_not?: String;
  familyName_in?: String[] | String;
  familyName_not_in?: String[] | String;
  familyName_lt?: String;
  familyName_lte?: String;
  familyName_gt?: String;
  familyName_gte?: String;
  familyName_contains?: String;
  familyName_not_contains?: String;
  familyName_starts_with?: String;
  familyName_not_starts_with?: String;
  familyName_ends_with?: String;
  familyName_not_ends_with?: String;
  givenName?: String;
  givenName_not?: String;
  givenName_in?: String[] | String;
  givenName_not_in?: String[] | String;
  givenName_lt?: String;
  givenName_lte?: String;
  givenName_gt?: String;
  givenName_gte?: String;
  givenName_contains?: String;
  givenName_not_contains?: String;
  givenName_starts_with?: String;
  givenName_not_starts_with?: String;
  givenName_ends_with?: String;
  givenName_not_ends_with?: String;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  affiliation?: String;
  affiliation_not?: String;
  affiliation_in?: String[] | String;
  affiliation_not_in?: String[] | String;
  affiliation_lt?: String;
  affiliation_lte?: String;
  affiliation_gt?: String;
  affiliation_gte?: String;
  affiliation_contains?: String;
  affiliation_not_contains?: String;
  affiliation_starts_with?: String;
  affiliation_not_starts_with?: String;
  affiliation_ends_with?: String;
  affiliation_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  passwordResetToken?: String;
  passwordResetToken_not?: String;
  passwordResetToken_in?: String[] | String;
  passwordResetToken_not_in?: String[] | String;
  passwordResetToken_lt?: String;
  passwordResetToken_lte?: String;
  passwordResetToken_gt?: String;
  passwordResetToken_gte?: String;
  passwordResetToken_contains?: String;
  passwordResetToken_not_contains?: String;
  passwordResetToken_starts_with?: String;
  passwordResetToken_not_starts_with?: String;
  passwordResetToken_ends_with?: String;
  passwordResetToken_not_ends_with?: String;
  passwordResetTokenExpiry?: DateTimeInput;
  passwordResetTokenExpiry_not?: DateTimeInput;
  passwordResetTokenExpiry_in?: DateTimeInput[] | DateTimeInput;
  passwordResetTokenExpiry_not_in?: DateTimeInput[] | DateTimeInput;
  passwordResetTokenExpiry_lt?: DateTimeInput;
  passwordResetTokenExpiry_lte?: DateTimeInput;
  passwordResetTokenExpiry_gt?: DateTimeInput;
  passwordResetTokenExpiry_gte?: DateTimeInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface DataRequestPartSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DataRequestPartWhereInput;
  AND?:
    | DataRequestPartSubscriptionWhereInput[]
    | DataRequestPartSubscriptionWhereInput;
  OR?:
    | DataRequestPartSubscriptionWhereInput[]
    | DataRequestPartSubscriptionWhereInput;
  NOT?:
    | DataRequestPartSubscriptionWhereInput[]
    | DataRequestPartSubscriptionWhereInput;
}

export interface UserUpdateManyMutationInput {
  familyName?: String;
  givenName?: String;
  username?: String;
  email?: String;
  affiliation?: String;
  password?: String;
  roles?: UserUpdaterolesInput;
  passwordResetToken?: String;
  passwordResetTokenExpiry?: DateTimeInput;
}

export interface DataRequestCreateInput {
  id?: ID_Input;
  user: UserCreateOneInput;
  madeAt: DateTimeInput;
  parts?: DataRequestPartCreateManyInput;
  url?: String;
}

export interface DataRequestPartUpdateManyMutationInput {
  dataFiles?: DataRequestPartUpdatedataFilesInput;
  status?: DataRequestStatus;
  statusReason?: String;
  uri?: String;
}

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export interface DataRequestPartUpdateInput {
  dataFiles?: DataRequestPartUpdatedataFilesInput;
  status?: DataRequestStatus;
  statusReason?: String;
  uri?: String;
}

export interface UserCreateInput {
  id?: ID_Input;
  familyName: String;
  givenName: String;
  username: String;
  email: String;
  affiliation: String;
  password: String;
  roles?: UserCreaterolesInput;
  passwordResetToken?: String;
  passwordResetTokenExpiry?: DateTimeInput;
}

export interface DataRequestPartUpdateManyDataInput {
  dataFiles?: DataRequestPartUpdatedataFilesInput;
  status?: DataRequestStatus;
  statusReason?: String;
  uri?: String;
}

export interface DataRequestPartUpdateDataInput {
  dataFiles?: DataRequestPartUpdatedataFilesInput;
  status?: DataRequestStatus;
  statusReason?: String;
  uri?: String;
}

export interface DataRequestPartUpdateManyWithWhereNestedInput {
  where: DataRequestPartScalarWhereInput;
  data: DataRequestPartUpdateManyDataInput;
}

export interface DataRequestPartCreateManyInput {
  create?: DataRequestPartCreateInput[] | DataRequestPartCreateInput;
  connect?: DataRequestPartWhereUniqueInput[] | DataRequestPartWhereUniqueInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface DataRequestPartCreateInput {
  id?: ID_Input;
  dataFiles?: DataRequestPartCreatedataFilesInput;
  status?: DataRequestStatus;
  statusReason?: String;
  uri?: String;
}

export interface UserUpdateInput {
  familyName?: String;
  givenName?: String;
  username?: String;
  email?: String;
  affiliation?: String;
  password?: String;
  roles?: UserUpdaterolesInput;
  passwordResetToken?: String;
  passwordResetTokenExpiry?: DateTimeInput;
}

export interface DataRequestPartCreatedataFilesInput {
  set?: String[] | String;
}

export interface DataRequestUpdateManyMutationInput {
  madeAt?: DateTimeInput;
  url?: String;
}

export interface UserUpdaterolesInput {
  set?: Role[] | Role;
}

export interface UserUpdateDataInput {
  familyName?: String;
  givenName?: String;
  username?: String;
  email?: String;
  affiliation?: String;
  password?: String;
  roles?: UserUpdaterolesInput;
  passwordResetToken?: String;
  passwordResetTokenExpiry?: DateTimeInput;
}

export interface DataRequestPartUpdateManyInput {
  create?: DataRequestPartCreateInput[] | DataRequestPartCreateInput;
  update?:
    | DataRequestPartUpdateWithWhereUniqueNestedInput[]
    | DataRequestPartUpdateWithWhereUniqueNestedInput;
  upsert?:
    | DataRequestPartUpsertWithWhereUniqueNestedInput[]
    | DataRequestPartUpsertWithWhereUniqueNestedInput;
  delete?: DataRequestPartWhereUniqueInput[] | DataRequestPartWhereUniqueInput;
  connect?: DataRequestPartWhereUniqueInput[] | DataRequestPartWhereUniqueInput;
  set?: DataRequestPartWhereUniqueInput[] | DataRequestPartWhereUniqueInput;
  disconnect?:
    | DataRequestPartWhereUniqueInput[]
    | DataRequestPartWhereUniqueInput;
  deleteMany?:
    | DataRequestPartScalarWhereInput[]
    | DataRequestPartScalarWhereInput;
  updateMany?:
    | DataRequestPartUpdateManyWithWhereNestedInput[]
    | DataRequestPartUpdateManyWithWhereNestedInput;
}

export interface DataRequestPartUpdateWithWhereUniqueNestedInput {
  where: DataRequestPartWhereUniqueInput;
  data: DataRequestPartUpdateDataInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  username?: String;
  email?: String;
  passwordResetToken?: String;
}>;

export type DataRequestPartWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface DataRequestSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DataRequestWhereInput;
  AND?: DataRequestSubscriptionWhereInput[] | DataRequestSubscriptionWhereInput;
  OR?: DataRequestSubscriptionWhereInput[] | DataRequestSubscriptionWhereInput;
  NOT?: DataRequestSubscriptionWhereInput[] | DataRequestSubscriptionWhereInput;
}

export interface DataRequestWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  user?: UserWhereInput;
  madeAt?: DateTimeInput;
  madeAt_not?: DateTimeInput;
  madeAt_in?: DateTimeInput[] | DateTimeInput;
  madeAt_not_in?: DateTimeInput[] | DateTimeInput;
  madeAt_lt?: DateTimeInput;
  madeAt_lte?: DateTimeInput;
  madeAt_gt?: DateTimeInput;
  madeAt_gte?: DateTimeInput;
  parts_every?: DataRequestPartWhereInput;
  parts_some?: DataRequestPartWhereInput;
  parts_none?: DataRequestPartWhereInput;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  AND?: DataRequestWhereInput[] | DataRequestWhereInput;
  OR?: DataRequestWhereInput[] | DataRequestWhereInput;
  NOT?: DataRequestWhereInput[] | DataRequestWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  familyName: String;
  givenName: String;
  username: String;
  email: String;
  affiliation: String;
  password: String;
  roles: Role[];
  passwordResetToken?: String;
  passwordResetTokenExpiry?: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  familyName: () => Promise<String>;
  givenName: () => Promise<String>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  affiliation: () => Promise<String>;
  password: () => Promise<String>;
  roles: () => Promise<Role[]>;
  passwordResetToken: () => Promise<String>;
  passwordResetTokenExpiry: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  familyName: () => Promise<AsyncIterator<String>>;
  givenName: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  affiliation: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  roles: () => Promise<AsyncIterator<Role[]>>;
  passwordResetToken: () => Promise<AsyncIterator<String>>;
  passwordResetTokenExpiry: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateDataRequest {
  count: Int;
}

export interface AggregateDataRequestPromise
  extends Promise<AggregateDataRequest>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDataRequestSubscription
  extends Promise<AsyncIterator<AggregateDataRequest>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DataRequestPart {
  id: ID_Output;
  dataFiles: String[];
  status: DataRequestStatus;
  statusReason: String;
  uri?: String;
}

export interface DataRequestPartPromise
  extends Promise<DataRequestPart>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  dataFiles: () => Promise<String[]>;
  status: () => Promise<DataRequestStatus>;
  statusReason: () => Promise<String>;
  uri: () => Promise<String>;
}

export interface DataRequestPartSubscription
  extends Promise<AsyncIterator<DataRequestPart>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  dataFiles: () => Promise<AsyncIterator<String[]>>;
  status: () => Promise<AsyncIterator<DataRequestStatus>>;
  statusReason: () => Promise<AsyncIterator<String>>;
  uri: () => Promise<AsyncIterator<String>>;
}

export interface DataRequestPartConnection {
  pageInfo: PageInfo;
  edges: DataRequestPartEdge[];
}

export interface DataRequestPartConnectionPromise
  extends Promise<DataRequestPartConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DataRequestPartEdge>>() => T;
  aggregate: <T = AggregateDataRequestPartPromise>() => T;
}

export interface DataRequestPartConnectionSubscription
  extends Promise<AsyncIterator<DataRequestPartConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DataRequestPartEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDataRequestPartSubscription>() => T;
}

export interface DataRequestConnection {
  pageInfo: PageInfo;
  edges: DataRequestEdge[];
}

export interface DataRequestConnectionPromise
  extends Promise<DataRequestConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DataRequestEdge>>() => T;
  aggregate: <T = AggregateDataRequestPromise>() => T;
}

export interface DataRequestConnectionSubscription
  extends Promise<AsyncIterator<DataRequestConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DataRequestEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDataRequestSubscription>() => T;
}

export interface DataRequestPartPreviousValues {
  id: ID_Output;
  dataFiles: String[];
  status: DataRequestStatus;
  statusReason: String;
  uri?: String;
}

export interface DataRequestPartPreviousValuesPromise
  extends Promise<DataRequestPartPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  dataFiles: () => Promise<String[]>;
  status: () => Promise<DataRequestStatus>;
  statusReason: () => Promise<String>;
  uri: () => Promise<String>;
}

export interface DataRequestPartPreviousValuesSubscription
  extends Promise<AsyncIterator<DataRequestPartPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  dataFiles: () => Promise<AsyncIterator<String[]>>;
  status: () => Promise<AsyncIterator<DataRequestStatus>>;
  statusReason: () => Promise<AsyncIterator<String>>;
  uri: () => Promise<AsyncIterator<String>>;
}

export interface DataRequestEdge {
  node: DataRequest;
  cursor: String;
}

export interface DataRequestEdgePromise
  extends Promise<DataRequestEdge>,
    Fragmentable {
  node: <T = DataRequestPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DataRequestEdgeSubscription
  extends Promise<AsyncIterator<DataRequestEdge>>,
    Fragmentable {
  node: <T = DataRequestSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface DataRequestPartSubscriptionPayload {
  mutation: MutationType;
  node: DataRequestPart;
  updatedFields: String[];
  previousValues: DataRequestPartPreviousValues;
}

export interface DataRequestPartSubscriptionPayloadPromise
  extends Promise<DataRequestPartSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DataRequestPartPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DataRequestPartPreviousValuesPromise>() => T;
}

export interface DataRequestPartSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DataRequestPartSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DataRequestPartSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DataRequestPartPreviousValuesSubscription>() => T;
}

export interface AggregateDataRequestPart {
  count: Int;
}

export interface AggregateDataRequestPartPromise
  extends Promise<AggregateDataRequestPart>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDataRequestPartSubscription
  extends Promise<AsyncIterator<AggregateDataRequestPart>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface DataRequestPreviousValues {
  id: ID_Output;
  madeAt: DateTimeOutput;
  url?: String;
}

export interface DataRequestPreviousValuesPromise
  extends Promise<DataRequestPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  madeAt: () => Promise<DateTimeOutput>;
  url: () => Promise<String>;
}

export interface DataRequestPreviousValuesSubscription
  extends Promise<AsyncIterator<DataRequestPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  madeAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface DataRequestSubscriptionPayload {
  mutation: MutationType;
  node: DataRequest;
  updatedFields: String[];
  previousValues: DataRequestPreviousValues;
}

export interface DataRequestSubscriptionPayloadPromise
  extends Promise<DataRequestSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DataRequestPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DataRequestPreviousValuesPromise>() => T;
}

export interface DataRequestSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DataRequestSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DataRequestSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DataRequestPreviousValuesSubscription>() => T;
}

export interface DataRequest {
  id: ID_Output;
  madeAt: DateTimeOutput;
  url?: String;
}

export interface DataRequestPromise extends Promise<DataRequest>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  madeAt: () => Promise<DateTimeOutput>;
  parts: <T = FragmentableArray<DataRequestPart>>(
    args?: {
      where?: DataRequestPartWhereInput;
      orderBy?: DataRequestPartOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  url: () => Promise<String>;
}

export interface DataRequestSubscription
  extends Promise<AsyncIterator<DataRequest>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  madeAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  parts: <T = Promise<AsyncIterator<DataRequestPartSubscription>>>(
    args?: {
      where?: DataRequestPartWhereInput;
      orderBy?: DataRequestPartOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  url: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface DataRequestPartEdge {
  node: DataRequestPart;
  cursor: String;
}

export interface DataRequestPartEdgePromise
  extends Promise<DataRequestPartEdge>,
    Fragmentable {
  node: <T = DataRequestPartPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DataRequestPartEdgeSubscription
  extends Promise<AsyncIterator<DataRequestPartEdge>>,
    Fragmentable {
  node: <T = DataRequestPartSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  familyName: String;
  givenName: String;
  username: String;
  email: String;
  affiliation: String;
  password: String;
  roles: Role[];
  passwordResetToken?: String;
  passwordResetTokenExpiry?: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  familyName: () => Promise<String>;
  givenName: () => Promise<String>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  affiliation: () => Promise<String>;
  password: () => Promise<String>;
  roles: () => Promise<Role[]>;
  passwordResetToken: () => Promise<String>;
  passwordResetTokenExpiry: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  familyName: () => Promise<AsyncIterator<String>>;
  givenName: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  affiliation: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  roles: () => Promise<AsyncIterator<Role[]>>;
  passwordResetToken: () => Promise<AsyncIterator<String>>;
  passwordResetTokenExpiry: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Role",
    embedded: false
  },
  {
    name: "DataRequestStatus",
    embedded: false
  },
  {
    name: "DataRequest",
    embedded: false
  },
  {
    name: "DataRequestPart",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `${process.env["PRISMA_ENDPOINT"]}`,
  secret: `${process.env["PRISMA_SECRET"]}`
});
export const prisma = new Prisma();
