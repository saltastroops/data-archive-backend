type AggregateDataFile {
  count: Int!
}

type AggregateDataRequest {
  count: Int!
}

type AggregateDataRequestPart {
  count: Int!
}

type AggregateHeader {
  count: Int!
}

type AggregateObservation {
  count: Int!
}

type AggregatePerson {
  count: Int!
}

type AggregateProposal {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

enum DataCategory {
  ACQUISITION
  ARC
  BIAS
  FLAT
  STANDARD
  METADATA
  SCIENCE
}

type DataFile {
  id: ID!
  available: Boolean!
  name: String!
  fitsHeadersURI: String
  headers(where: HeaderWhereInput, orderBy: HeaderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Header!]
  previews: [String!]!
  startTime: DateTime
  category: DataCategory!
  observation: Observation
  size: Int
}

type DataFileConnection {
  pageInfo: PageInfo!
  edges: [DataFileEdge]!
  aggregate: AggregateDataFile!
}

input DataFileCreateInput {
  available: Boolean
  name: String!
  fitsHeadersURI: String
  headers: HeaderCreateManyInput
  previews: DataFileCreatepreviewsInput
  startTime: DateTime
  category: DataCategory!
  observation: ObservationCreateOneWithoutDataFilesInput
  size: Int
}

input DataFileCreateManyInput {
  create: [DataFileCreateInput!]
  connect: [DataFileWhereUniqueInput!]
}

input DataFileCreateManyWithoutObservationInput {
  create: [DataFileCreateWithoutObservationInput!]
  connect: [DataFileWhereUniqueInput!]
}

input DataFileCreatepreviewsInput {
  set: [String!]
}

input DataFileCreateWithoutObservationInput {
  available: Boolean
  name: String!
  fitsHeadersURI: String
  headers: HeaderCreateManyInput
  previews: DataFileCreatepreviewsInput
  startTime: DateTime
  category: DataCategory!
  size: Int
}

type DataFileEdge {
  node: DataFile!
  cursor: String!
}

enum DataFileOrderByInput {
  id_ASC
  id_DESC
  available_ASC
  available_DESC
  name_ASC
  name_DESC
  fitsHeadersURI_ASC
  fitsHeadersURI_DESC
  startTime_ASC
  startTime_DESC
  category_ASC
  category_DESC
  size_ASC
  size_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DataFilePreviousValues {
  id: ID!
  available: Boolean!
  name: String!
  fitsHeadersURI: String
  previews: [String!]!
  startTime: DateTime
  category: DataCategory!
  size: Int
}

input DataFileScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  available: Boolean
  available_not: Boolean
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  fitsHeadersURI: String
  fitsHeadersURI_not: String
  fitsHeadersURI_in: [String!]
  fitsHeadersURI_not_in: [String!]
  fitsHeadersURI_lt: String
  fitsHeadersURI_lte: String
  fitsHeadersURI_gt: String
  fitsHeadersURI_gte: String
  fitsHeadersURI_contains: String
  fitsHeadersURI_not_contains: String
  fitsHeadersURI_starts_with: String
  fitsHeadersURI_not_starts_with: String
  fitsHeadersURI_ends_with: String
  fitsHeadersURI_not_ends_with: String
  startTime: DateTime
  startTime_not: DateTime
  startTime_in: [DateTime!]
  startTime_not_in: [DateTime!]
  startTime_lt: DateTime
  startTime_lte: DateTime
  startTime_gt: DateTime
  startTime_gte: DateTime
  category: DataCategory
  category_not: DataCategory
  category_in: [DataCategory!]
  category_not_in: [DataCategory!]
  size: Int
  size_not: Int
  size_in: [Int!]
  size_not_in: [Int!]
  size_lt: Int
  size_lte: Int
  size_gt: Int
  size_gte: Int
  AND: [DataFileScalarWhereInput!]
  OR: [DataFileScalarWhereInput!]
  NOT: [DataFileScalarWhereInput!]
}

type DataFileSubscriptionPayload {
  mutation: MutationType!
  node: DataFile
  updatedFields: [String!]
  previousValues: DataFilePreviousValues
}

input DataFileSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DataFileWhereInput
  AND: [DataFileSubscriptionWhereInput!]
  OR: [DataFileSubscriptionWhereInput!]
  NOT: [DataFileSubscriptionWhereInput!]
}

input DataFileUpdateDataInput {
  available: Boolean
  name: String
  fitsHeadersURI: String
  headers: HeaderUpdateManyInput
  previews: DataFileUpdatepreviewsInput
  startTime: DateTime
  category: DataCategory
  observation: ObservationUpdateOneWithoutDataFilesInput
  size: Int
}

input DataFileUpdateInput {
  available: Boolean
  name: String
  fitsHeadersURI: String
  headers: HeaderUpdateManyInput
  previews: DataFileUpdatepreviewsInput
  startTime: DateTime
  category: DataCategory
  observation: ObservationUpdateOneWithoutDataFilesInput
  size: Int
}

input DataFileUpdateManyDataInput {
  available: Boolean
  name: String
  fitsHeadersURI: String
  previews: DataFileUpdatepreviewsInput
  startTime: DateTime
  category: DataCategory
  size: Int
}

input DataFileUpdateManyInput {
  create: [DataFileCreateInput!]
  update: [DataFileUpdateWithWhereUniqueNestedInput!]
  upsert: [DataFileUpsertWithWhereUniqueNestedInput!]
  delete: [DataFileWhereUniqueInput!]
  connect: [DataFileWhereUniqueInput!]
  set: [DataFileWhereUniqueInput!]
  disconnect: [DataFileWhereUniqueInput!]
  deleteMany: [DataFileScalarWhereInput!]
  updateMany: [DataFileUpdateManyWithWhereNestedInput!]
}

input DataFileUpdateManyMutationInput {
  available: Boolean
  name: String
  fitsHeadersURI: String
  previews: DataFileUpdatepreviewsInput
  startTime: DateTime
  category: DataCategory
  size: Int
}

input DataFileUpdateManyWithoutObservationInput {
  create: [DataFileCreateWithoutObservationInput!]
  delete: [DataFileWhereUniqueInput!]
  connect: [DataFileWhereUniqueInput!]
  set: [DataFileWhereUniqueInput!]
  disconnect: [DataFileWhereUniqueInput!]
  update: [DataFileUpdateWithWhereUniqueWithoutObservationInput!]
  upsert: [DataFileUpsertWithWhereUniqueWithoutObservationInput!]
  deleteMany: [DataFileScalarWhereInput!]
  updateMany: [DataFileUpdateManyWithWhereNestedInput!]
}

input DataFileUpdateManyWithWhereNestedInput {
  where: DataFileScalarWhereInput!
  data: DataFileUpdateManyDataInput!
}

input DataFileUpdatepreviewsInput {
  set: [String!]
}

input DataFileUpdateWithoutObservationDataInput {
  available: Boolean
  name: String
  fitsHeadersURI: String
  headers: HeaderUpdateManyInput
  previews: DataFileUpdatepreviewsInput
  startTime: DateTime
  category: DataCategory
  size: Int
}

input DataFileUpdateWithWhereUniqueNestedInput {
  where: DataFileWhereUniqueInput!
  data: DataFileUpdateDataInput!
}

input DataFileUpdateWithWhereUniqueWithoutObservationInput {
  where: DataFileWhereUniqueInput!
  data: DataFileUpdateWithoutObservationDataInput!
}

input DataFileUpsertWithWhereUniqueNestedInput {
  where: DataFileWhereUniqueInput!
  update: DataFileUpdateDataInput!
  create: DataFileCreateInput!
}

input DataFileUpsertWithWhereUniqueWithoutObservationInput {
  where: DataFileWhereUniqueInput!
  update: DataFileUpdateWithoutObservationDataInput!
  create: DataFileCreateWithoutObservationInput!
}

input DataFileWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  available: Boolean
  available_not: Boolean
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  fitsHeadersURI: String
  fitsHeadersURI_not: String
  fitsHeadersURI_in: [String!]
  fitsHeadersURI_not_in: [String!]
  fitsHeadersURI_lt: String
  fitsHeadersURI_lte: String
  fitsHeadersURI_gt: String
  fitsHeadersURI_gte: String
  fitsHeadersURI_contains: String
  fitsHeadersURI_not_contains: String
  fitsHeadersURI_starts_with: String
  fitsHeadersURI_not_starts_with: String
  fitsHeadersURI_ends_with: String
  fitsHeadersURI_not_ends_with: String
  headers_every: HeaderWhereInput
  headers_some: HeaderWhereInput
  headers_none: HeaderWhereInput
  startTime: DateTime
  startTime_not: DateTime
  startTime_in: [DateTime!]
  startTime_not_in: [DateTime!]
  startTime_lt: DateTime
  startTime_lte: DateTime
  startTime_gt: DateTime
  startTime_gte: DateTime
  category: DataCategory
  category_not: DataCategory
  category_in: [DataCategory!]
  category_not_in: [DataCategory!]
  observation: ObservationWhereInput
  size: Int
  size_not: Int
  size_in: [Int!]
  size_not_in: [Int!]
  size_lt: Int
  size_lte: Int
  size_gt: Int
  size_gte: Int
  AND: [DataFileWhereInput!]
  OR: [DataFileWhereInput!]
  NOT: [DataFileWhereInput!]
}

input DataFileWhereUniqueInput {
  id: ID
}

type DataRequest {
  id: ID!
  user: User!
  madeAt: DateTime!
  parts(where: DataRequestPartWhereInput, orderBy: DataRequestPartOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DataRequestPart!]
  url: String
}

type DataRequestConnection {
  pageInfo: PageInfo!
  edges: [DataRequestEdge]!
  aggregate: AggregateDataRequest!
}

input DataRequestCreateInput {
  user: UserCreateOneInput!
  madeAt: DateTime!
  parts: DataRequestPartCreateManyInput
  url: String
}

type DataRequestEdge {
  node: DataRequest!
  cursor: String!
}

enum DataRequestOrderByInput {
  id_ASC
  id_DESC
  madeAt_ASC
  madeAt_DESC
  url_ASC
  url_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DataRequestPart {
  id: ID!
  dataFiles(where: DataFileWhereInput, orderBy: DataFileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DataFile!]
  status: DataRequestStatus!
  statusReason: String!
  uri: String
}

type DataRequestPartConnection {
  pageInfo: PageInfo!
  edges: [DataRequestPartEdge]!
  aggregate: AggregateDataRequestPart!
}

input DataRequestPartCreateInput {
  dataFiles: DataFileCreateManyInput
  status: DataRequestStatus
  statusReason: String
  uri: String
}

input DataRequestPartCreateManyInput {
  create: [DataRequestPartCreateInput!]
  connect: [DataRequestPartWhereUniqueInput!]
}

type DataRequestPartEdge {
  node: DataRequestPart!
  cursor: String!
}

enum DataRequestPartOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  statusReason_ASC
  statusReason_DESC
  uri_ASC
  uri_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DataRequestPartPreviousValues {
  id: ID!
  status: DataRequestStatus!
  statusReason: String!
  uri: String
}

input DataRequestPartScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  status: DataRequestStatus
  status_not: DataRequestStatus
  status_in: [DataRequestStatus!]
  status_not_in: [DataRequestStatus!]
  statusReason: String
  statusReason_not: String
  statusReason_in: [String!]
  statusReason_not_in: [String!]
  statusReason_lt: String
  statusReason_lte: String
  statusReason_gt: String
  statusReason_gte: String
  statusReason_contains: String
  statusReason_not_contains: String
  statusReason_starts_with: String
  statusReason_not_starts_with: String
  statusReason_ends_with: String
  statusReason_not_ends_with: String
  uri: String
  uri_not: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_lt: String
  uri_lte: String
  uri_gt: String
  uri_gte: String
  uri_contains: String
  uri_not_contains: String
  uri_starts_with: String
  uri_not_starts_with: String
  uri_ends_with: String
  uri_not_ends_with: String
  AND: [DataRequestPartScalarWhereInput!]
  OR: [DataRequestPartScalarWhereInput!]
  NOT: [DataRequestPartScalarWhereInput!]
}

type DataRequestPartSubscriptionPayload {
  mutation: MutationType!
  node: DataRequestPart
  updatedFields: [String!]
  previousValues: DataRequestPartPreviousValues
}

input DataRequestPartSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DataRequestPartWhereInput
  AND: [DataRequestPartSubscriptionWhereInput!]
  OR: [DataRequestPartSubscriptionWhereInput!]
  NOT: [DataRequestPartSubscriptionWhereInput!]
}

input DataRequestPartUpdateDataInput {
  dataFiles: DataFileUpdateManyInput
  status: DataRequestStatus
  statusReason: String
  uri: String
}

input DataRequestPartUpdateInput {
  dataFiles: DataFileUpdateManyInput
  status: DataRequestStatus
  statusReason: String
  uri: String
}

input DataRequestPartUpdateManyDataInput {
  status: DataRequestStatus
  statusReason: String
  uri: String
}

input DataRequestPartUpdateManyInput {
  create: [DataRequestPartCreateInput!]
  update: [DataRequestPartUpdateWithWhereUniqueNestedInput!]
  upsert: [DataRequestPartUpsertWithWhereUniqueNestedInput!]
  delete: [DataRequestPartWhereUniqueInput!]
  connect: [DataRequestPartWhereUniqueInput!]
  set: [DataRequestPartWhereUniqueInput!]
  disconnect: [DataRequestPartWhereUniqueInput!]
  deleteMany: [DataRequestPartScalarWhereInput!]
  updateMany: [DataRequestPartUpdateManyWithWhereNestedInput!]
}

input DataRequestPartUpdateManyMutationInput {
  status: DataRequestStatus
  statusReason: String
  uri: String
}

input DataRequestPartUpdateManyWithWhereNestedInput {
  where: DataRequestPartScalarWhereInput!
  data: DataRequestPartUpdateManyDataInput!
}

input DataRequestPartUpdateWithWhereUniqueNestedInput {
  where: DataRequestPartWhereUniqueInput!
  data: DataRequestPartUpdateDataInput!
}

input DataRequestPartUpsertWithWhereUniqueNestedInput {
  where: DataRequestPartWhereUniqueInput!
  update: DataRequestPartUpdateDataInput!
  create: DataRequestPartCreateInput!
}

input DataRequestPartWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  dataFiles_every: DataFileWhereInput
  dataFiles_some: DataFileWhereInput
  dataFiles_none: DataFileWhereInput
  status: DataRequestStatus
  status_not: DataRequestStatus
  status_in: [DataRequestStatus!]
  status_not_in: [DataRequestStatus!]
  statusReason: String
  statusReason_not: String
  statusReason_in: [String!]
  statusReason_not_in: [String!]
  statusReason_lt: String
  statusReason_lte: String
  statusReason_gt: String
  statusReason_gte: String
  statusReason_contains: String
  statusReason_not_contains: String
  statusReason_starts_with: String
  statusReason_not_starts_with: String
  statusReason_ends_with: String
  statusReason_not_ends_with: String
  uri: String
  uri_not: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_lt: String
  uri_lte: String
  uri_gt: String
  uri_gte: String
  uri_contains: String
  uri_not_contains: String
  uri_starts_with: String
  uri_not_starts_with: String
  uri_ends_with: String
  uri_not_ends_with: String
  AND: [DataRequestPartWhereInput!]
  OR: [DataRequestPartWhereInput!]
  NOT: [DataRequestPartWhereInput!]
}

input DataRequestPartWhereUniqueInput {
  id: ID
}

type DataRequestPreviousValues {
  id: ID!
  madeAt: DateTime!
  url: String
}

enum DataRequestStatus {
  PENDING
  FAILED
  SUCCESSFUL
}

type DataRequestSubscriptionPayload {
  mutation: MutationType!
  node: DataRequest
  updatedFields: [String!]
  previousValues: DataRequestPreviousValues
}

input DataRequestSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DataRequestWhereInput
  AND: [DataRequestSubscriptionWhereInput!]
  OR: [DataRequestSubscriptionWhereInput!]
  NOT: [DataRequestSubscriptionWhereInput!]
}

input DataRequestUpdateInput {
  user: UserUpdateOneRequiredInput
  madeAt: DateTime
  parts: DataRequestPartUpdateManyInput
  url: String
}

input DataRequestUpdateManyMutationInput {
  madeAt: DateTime
  url: String
}

input DataRequestWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  madeAt: DateTime
  madeAt_not: DateTime
  madeAt_in: [DateTime!]
  madeAt_not_in: [DateTime!]
  madeAt_lt: DateTime
  madeAt_lte: DateTime
  madeAt_gt: DateTime
  madeAt_gte: DateTime
  parts_every: DataRequestPartWhereInput
  parts_some: DataRequestPartWhereInput
  parts_none: DataRequestPartWhereInput
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  AND: [DataRequestWhereInput!]
  OR: [DataRequestWhereInput!]
  NOT: [DataRequestWhereInput!]
}

input DataRequestWhereUniqueInput {
  id: ID
}

scalar DateTime

type Header {
  id: ID!
  key: String!
  value: String
}

type HeaderConnection {
  pageInfo: PageInfo!
  edges: [HeaderEdge]!
  aggregate: AggregateHeader!
}

input HeaderCreateInput {
  key: String!
  value: String
}

input HeaderCreateManyInput {
  create: [HeaderCreateInput!]
  connect: [HeaderWhereUniqueInput!]
}

type HeaderEdge {
  node: Header!
  cursor: String!
}

enum HeaderOrderByInput {
  id_ASC
  id_DESC
  key_ASC
  key_DESC
  value_ASC
  value_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type HeaderPreviousValues {
  id: ID!
  key: String!
  value: String
}

input HeaderScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  key: String
  key_not: String
  key_in: [String!]
  key_not_in: [String!]
  key_lt: String
  key_lte: String
  key_gt: String
  key_gte: String
  key_contains: String
  key_not_contains: String
  key_starts_with: String
  key_not_starts_with: String
  key_ends_with: String
  key_not_ends_with: String
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  AND: [HeaderScalarWhereInput!]
  OR: [HeaderScalarWhereInput!]
  NOT: [HeaderScalarWhereInput!]
}

type HeaderSubscriptionPayload {
  mutation: MutationType!
  node: Header
  updatedFields: [String!]
  previousValues: HeaderPreviousValues
}

input HeaderSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: HeaderWhereInput
  AND: [HeaderSubscriptionWhereInput!]
  OR: [HeaderSubscriptionWhereInput!]
  NOT: [HeaderSubscriptionWhereInput!]
}

input HeaderUpdateDataInput {
  key: String
  value: String
}

input HeaderUpdateInput {
  key: String
  value: String
}

input HeaderUpdateManyDataInput {
  key: String
  value: String
}

input HeaderUpdateManyInput {
  create: [HeaderCreateInput!]
  update: [HeaderUpdateWithWhereUniqueNestedInput!]
  upsert: [HeaderUpsertWithWhereUniqueNestedInput!]
  delete: [HeaderWhereUniqueInput!]
  connect: [HeaderWhereUniqueInput!]
  set: [HeaderWhereUniqueInput!]
  disconnect: [HeaderWhereUniqueInput!]
  deleteMany: [HeaderScalarWhereInput!]
  updateMany: [HeaderUpdateManyWithWhereNestedInput!]
}

input HeaderUpdateManyMutationInput {
  key: String
  value: String
}

input HeaderUpdateManyWithWhereNestedInput {
  where: HeaderScalarWhereInput!
  data: HeaderUpdateManyDataInput!
}

input HeaderUpdateWithWhereUniqueNestedInput {
  where: HeaderWhereUniqueInput!
  data: HeaderUpdateDataInput!
}

input HeaderUpsertWithWhereUniqueNestedInput {
  where: HeaderWhereUniqueInput!
  update: HeaderUpdateDataInput!
  create: HeaderCreateInput!
}

input HeaderWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  key: String
  key_not: String
  key_in: [String!]
  key_not_in: [String!]
  key_lt: String
  key_lte: String
  key_gt: String
  key_gte: String
  key_contains: String
  key_not_contains: String
  key_starts_with: String
  key_not_starts_with: String
  key_ends_with: String
  key_not_ends_with: String
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  AND: [HeaderWhereInput!]
  OR: [HeaderWhereInput!]
  NOT: [HeaderWhereInput!]
}

input HeaderWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createDataFile(data: DataFileCreateInput!): DataFile!
  updateDataFile(data: DataFileUpdateInput!, where: DataFileWhereUniqueInput!): DataFile
  updateManyDataFiles(data: DataFileUpdateManyMutationInput!, where: DataFileWhereInput): BatchPayload!
  upsertDataFile(where: DataFileWhereUniqueInput!, create: DataFileCreateInput!, update: DataFileUpdateInput!): DataFile!
  deleteDataFile(where: DataFileWhereUniqueInput!): DataFile
  deleteManyDataFiles(where: DataFileWhereInput): BatchPayload!
  createDataRequest(data: DataRequestCreateInput!): DataRequest!
  updateDataRequest(data: DataRequestUpdateInput!, where: DataRequestWhereUniqueInput!): DataRequest
  updateManyDataRequests(data: DataRequestUpdateManyMutationInput!, where: DataRequestWhereInput): BatchPayload!
  upsertDataRequest(where: DataRequestWhereUniqueInput!, create: DataRequestCreateInput!, update: DataRequestUpdateInput!): DataRequest!
  deleteDataRequest(where: DataRequestWhereUniqueInput!): DataRequest
  deleteManyDataRequests(where: DataRequestWhereInput): BatchPayload!
  createDataRequestPart(data: DataRequestPartCreateInput!): DataRequestPart!
  updateDataRequestPart(data: DataRequestPartUpdateInput!, where: DataRequestPartWhereUniqueInput!): DataRequestPart
  updateManyDataRequestParts(data: DataRequestPartUpdateManyMutationInput!, where: DataRequestPartWhereInput): BatchPayload!
  upsertDataRequestPart(where: DataRequestPartWhereUniqueInput!, create: DataRequestPartCreateInput!, update: DataRequestPartUpdateInput!): DataRequestPart!
  deleteDataRequestPart(where: DataRequestPartWhereUniqueInput!): DataRequestPart
  deleteManyDataRequestParts(where: DataRequestPartWhereInput): BatchPayload!
  createHeader(data: HeaderCreateInput!): Header!
  updateHeader(data: HeaderUpdateInput!, where: HeaderWhereUniqueInput!): Header
  updateManyHeaders(data: HeaderUpdateManyMutationInput!, where: HeaderWhereInput): BatchPayload!
  upsertHeader(where: HeaderWhereUniqueInput!, create: HeaderCreateInput!, update: HeaderUpdateInput!): Header!
  deleteHeader(where: HeaderWhereUniqueInput!): Header
  deleteManyHeaders(where: HeaderWhereInput): BatchPayload!
  createObservation(data: ObservationCreateInput!): Observation!
  updateObservation(data: ObservationUpdateInput!, where: ObservationWhereUniqueInput!): Observation
  updateManyObservations(data: ObservationUpdateManyMutationInput!, where: ObservationWhereInput): BatchPayload!
  upsertObservation(where: ObservationWhereUniqueInput!, create: ObservationCreateInput!, update: ObservationUpdateInput!): Observation!
  deleteObservation(where: ObservationWhereUniqueInput!): Observation
  deleteManyObservations(where: ObservationWhereInput): BatchPayload!
  createPerson(data: PersonCreateInput!): Person!
  updatePerson(data: PersonUpdateInput!, where: PersonWhereUniqueInput!): Person
  updateManyPersons(data: PersonUpdateManyMutationInput!, where: PersonWhereInput): BatchPayload!
  upsertPerson(where: PersonWhereUniqueInput!, create: PersonCreateInput!, update: PersonUpdateInput!): Person!
  deletePerson(where: PersonWhereUniqueInput!): Person
  deleteManyPersons(where: PersonWhereInput): BatchPayload!
  createProposal(data: ProposalCreateInput!): Proposal!
  updateProposal(data: ProposalUpdateInput!, where: ProposalWhereUniqueInput!): Proposal
  updateManyProposals(data: ProposalUpdateManyMutationInput!, where: ProposalWhereInput): BatchPayload!
  upsertProposal(where: ProposalWhereUniqueInput!, create: ProposalCreateInput!, update: ProposalUpdateInput!): Proposal!
  deleteProposal(where: ProposalWhereUniqueInput!): Proposal
  deleteManyProposals(where: ProposalWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Observation {
  id: ID!
  startTime: DateTime!
  telescope: Telescope!
  proposal: Proposal
  dataFiles(where: DataFileWhereInput, orderBy: DataFileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DataFile!]
  publicFrom: DateTime!
}

type ObservationConnection {
  pageInfo: PageInfo!
  edges: [ObservationEdge]!
  aggregate: AggregateObservation!
}

input ObservationCreateInput {
  startTime: DateTime!
  telescope: Telescope!
  proposal: ProposalCreateOneWithoutObservationsInput
  dataFiles: DataFileCreateManyWithoutObservationInput
  publicFrom: DateTime!
}

input ObservationCreateManyWithoutProposalInput {
  create: [ObservationCreateWithoutProposalInput!]
  connect: [ObservationWhereUniqueInput!]
}

input ObservationCreateOneWithoutDataFilesInput {
  create: ObservationCreateWithoutDataFilesInput
  connect: ObservationWhereUniqueInput
}

input ObservationCreateWithoutDataFilesInput {
  startTime: DateTime!
  telescope: Telescope!
  proposal: ProposalCreateOneWithoutObservationsInput
  publicFrom: DateTime!
}

input ObservationCreateWithoutProposalInput {
  startTime: DateTime!
  telescope: Telescope!
  dataFiles: DataFileCreateManyWithoutObservationInput
  publicFrom: DateTime!
}

type ObservationEdge {
  node: Observation!
  cursor: String!
}

enum ObservationOrderByInput {
  id_ASC
  id_DESC
  startTime_ASC
  startTime_DESC
  telescope_ASC
  telescope_DESC
  publicFrom_ASC
  publicFrom_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ObservationPreviousValues {
  id: ID!
  startTime: DateTime!
  telescope: Telescope!
  publicFrom: DateTime!
}

input ObservationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  startTime: DateTime
  startTime_not: DateTime
  startTime_in: [DateTime!]
  startTime_not_in: [DateTime!]
  startTime_lt: DateTime
  startTime_lte: DateTime
  startTime_gt: DateTime
  startTime_gte: DateTime
  telescope: Telescope
  telescope_not: Telescope
  telescope_in: [Telescope!]
  telescope_not_in: [Telescope!]
  publicFrom: DateTime
  publicFrom_not: DateTime
  publicFrom_in: [DateTime!]
  publicFrom_not_in: [DateTime!]
  publicFrom_lt: DateTime
  publicFrom_lte: DateTime
  publicFrom_gt: DateTime
  publicFrom_gte: DateTime
  AND: [ObservationScalarWhereInput!]
  OR: [ObservationScalarWhereInput!]
  NOT: [ObservationScalarWhereInput!]
}

type ObservationSubscriptionPayload {
  mutation: MutationType!
  node: Observation
  updatedFields: [String!]
  previousValues: ObservationPreviousValues
}

input ObservationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ObservationWhereInput
  AND: [ObservationSubscriptionWhereInput!]
  OR: [ObservationSubscriptionWhereInput!]
  NOT: [ObservationSubscriptionWhereInput!]
}

input ObservationUpdateInput {
  startTime: DateTime
  telescope: Telescope
  proposal: ProposalUpdateOneWithoutObservationsInput
  dataFiles: DataFileUpdateManyWithoutObservationInput
  publicFrom: DateTime
}

input ObservationUpdateManyDataInput {
  startTime: DateTime
  telescope: Telescope
  publicFrom: DateTime
}

input ObservationUpdateManyMutationInput {
  startTime: DateTime
  telescope: Telescope
  publicFrom: DateTime
}

input ObservationUpdateManyWithoutProposalInput {
  create: [ObservationCreateWithoutProposalInput!]
  delete: [ObservationWhereUniqueInput!]
  connect: [ObservationWhereUniqueInput!]
  set: [ObservationWhereUniqueInput!]
  disconnect: [ObservationWhereUniqueInput!]
  update: [ObservationUpdateWithWhereUniqueWithoutProposalInput!]
  upsert: [ObservationUpsertWithWhereUniqueWithoutProposalInput!]
  deleteMany: [ObservationScalarWhereInput!]
  updateMany: [ObservationUpdateManyWithWhereNestedInput!]
}

input ObservationUpdateManyWithWhereNestedInput {
  where: ObservationScalarWhereInput!
  data: ObservationUpdateManyDataInput!
}

input ObservationUpdateOneWithoutDataFilesInput {
  create: ObservationCreateWithoutDataFilesInput
  update: ObservationUpdateWithoutDataFilesDataInput
  upsert: ObservationUpsertWithoutDataFilesInput
  delete: Boolean
  disconnect: Boolean
  connect: ObservationWhereUniqueInput
}

input ObservationUpdateWithoutDataFilesDataInput {
  startTime: DateTime
  telescope: Telescope
  proposal: ProposalUpdateOneWithoutObservationsInput
  publicFrom: DateTime
}

input ObservationUpdateWithoutProposalDataInput {
  startTime: DateTime
  telescope: Telescope
  dataFiles: DataFileUpdateManyWithoutObservationInput
  publicFrom: DateTime
}

input ObservationUpdateWithWhereUniqueWithoutProposalInput {
  where: ObservationWhereUniqueInput!
  data: ObservationUpdateWithoutProposalDataInput!
}

input ObservationUpsertWithoutDataFilesInput {
  update: ObservationUpdateWithoutDataFilesDataInput!
  create: ObservationCreateWithoutDataFilesInput!
}

input ObservationUpsertWithWhereUniqueWithoutProposalInput {
  where: ObservationWhereUniqueInput!
  update: ObservationUpdateWithoutProposalDataInput!
  create: ObservationCreateWithoutProposalInput!
}

input ObservationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  startTime: DateTime
  startTime_not: DateTime
  startTime_in: [DateTime!]
  startTime_not_in: [DateTime!]
  startTime_lt: DateTime
  startTime_lte: DateTime
  startTime_gt: DateTime
  startTime_gte: DateTime
  telescope: Telescope
  telescope_not: Telescope
  telescope_in: [Telescope!]
  telescope_not_in: [Telescope!]
  proposal: ProposalWhereInput
  dataFiles_every: DataFileWhereInput
  dataFiles_some: DataFileWhereInput
  dataFiles_none: DataFileWhereInput
  publicFrom: DateTime
  publicFrom_not: DateTime
  publicFrom_in: [DateTime!]
  publicFrom_not_in: [DateTime!]
  publicFrom_lt: DateTime
  publicFrom_lte: DateTime
  publicFrom_gt: DateTime
  publicFrom_gte: DateTime
  AND: [ObservationWhereInput!]
  OR: [ObservationWhereInput!]
  NOT: [ObservationWhereInput!]
}

input ObservationWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Person {
  id: ID!
  givenName: String!
  familyName: String!
}

type PersonConnection {
  pageInfo: PageInfo!
  edges: [PersonEdge]!
  aggregate: AggregatePerson!
}

input PersonCreateInput {
  givenName: String!
  familyName: String!
}

input PersonCreateOneInput {
  create: PersonCreateInput
  connect: PersonWhereUniqueInput
}

type PersonEdge {
  node: Person!
  cursor: String!
}

enum PersonOrderByInput {
  id_ASC
  id_DESC
  givenName_ASC
  givenName_DESC
  familyName_ASC
  familyName_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PersonPreviousValues {
  id: ID!
  givenName: String!
  familyName: String!
}

type PersonSubscriptionPayload {
  mutation: MutationType!
  node: Person
  updatedFields: [String!]
  previousValues: PersonPreviousValues
}

input PersonSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PersonWhereInput
  AND: [PersonSubscriptionWhereInput!]
  OR: [PersonSubscriptionWhereInput!]
  NOT: [PersonSubscriptionWhereInput!]
}

input PersonUpdateDataInput {
  givenName: String
  familyName: String
}

input PersonUpdateInput {
  givenName: String
  familyName: String
}

input PersonUpdateManyMutationInput {
  givenName: String
  familyName: String
}

input PersonUpdateOneRequiredInput {
  create: PersonCreateInput
  update: PersonUpdateDataInput
  upsert: PersonUpsertNestedInput
  connect: PersonWhereUniqueInput
}

input PersonUpsertNestedInput {
  update: PersonUpdateDataInput!
  create: PersonCreateInput!
}

input PersonWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  givenName: String
  givenName_not: String
  givenName_in: [String!]
  givenName_not_in: [String!]
  givenName_lt: String
  givenName_lte: String
  givenName_gt: String
  givenName_gte: String
  givenName_contains: String
  givenName_not_contains: String
  givenName_starts_with: String
  givenName_not_starts_with: String
  givenName_ends_with: String
  givenName_not_ends_with: String
  familyName: String
  familyName_not: String
  familyName_in: [String!]
  familyName_not_in: [String!]
  familyName_lt: String
  familyName_lte: String
  familyName_gt: String
  familyName_gte: String
  familyName_contains: String
  familyName_not_contains: String
  familyName_starts_with: String
  familyName_not_starts_with: String
  familyName_ends_with: String
  familyName_not_ends_with: String
  AND: [PersonWhereInput!]
  OR: [PersonWhereInput!]
  NOT: [PersonWhereInput!]
}

input PersonWhereUniqueInput {
  id: ID
}

type Proposal {
  id: ID!
  code: String!
  title: String!
  abstract: String!
  principalInvestigator: Person!
  observations(where: ObservationWhereInput, orderBy: ObservationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Observation!]
}

type ProposalConnection {
  pageInfo: PageInfo!
  edges: [ProposalEdge]!
  aggregate: AggregateProposal!
}

input ProposalCreateInput {
  code: String!
  title: String!
  abstract: String!
  principalInvestigator: PersonCreateOneInput!
  observations: ObservationCreateManyWithoutProposalInput
}

input ProposalCreateOneWithoutObservationsInput {
  create: ProposalCreateWithoutObservationsInput
  connect: ProposalWhereUniqueInput
}

input ProposalCreateWithoutObservationsInput {
  code: String!
  title: String!
  abstract: String!
  principalInvestigator: PersonCreateOneInput!
}

type ProposalEdge {
  node: Proposal!
  cursor: String!
}

enum ProposalOrderByInput {
  id_ASC
  id_DESC
  code_ASC
  code_DESC
  title_ASC
  title_DESC
  abstract_ASC
  abstract_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProposalPreviousValues {
  id: ID!
  code: String!
  title: String!
  abstract: String!
}

type ProposalSubscriptionPayload {
  mutation: MutationType!
  node: Proposal
  updatedFields: [String!]
  previousValues: ProposalPreviousValues
}

input ProposalSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProposalWhereInput
  AND: [ProposalSubscriptionWhereInput!]
  OR: [ProposalSubscriptionWhereInput!]
  NOT: [ProposalSubscriptionWhereInput!]
}

input ProposalUpdateInput {
  code: String
  title: String
  abstract: String
  principalInvestigator: PersonUpdateOneRequiredInput
  observations: ObservationUpdateManyWithoutProposalInput
}

input ProposalUpdateManyMutationInput {
  code: String
  title: String
  abstract: String
}

input ProposalUpdateOneWithoutObservationsInput {
  create: ProposalCreateWithoutObservationsInput
  update: ProposalUpdateWithoutObservationsDataInput
  upsert: ProposalUpsertWithoutObservationsInput
  delete: Boolean
  disconnect: Boolean
  connect: ProposalWhereUniqueInput
}

input ProposalUpdateWithoutObservationsDataInput {
  code: String
  title: String
  abstract: String
  principalInvestigator: PersonUpdateOneRequiredInput
}

input ProposalUpsertWithoutObservationsInput {
  update: ProposalUpdateWithoutObservationsDataInput!
  create: ProposalCreateWithoutObservationsInput!
}

input ProposalWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  code: String
  code_not: String
  code_in: [String!]
  code_not_in: [String!]
  code_lt: String
  code_lte: String
  code_gt: String
  code_gte: String
  code_contains: String
  code_not_contains: String
  code_starts_with: String
  code_not_starts_with: String
  code_ends_with: String
  code_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  abstract: String
  abstract_not: String
  abstract_in: [String!]
  abstract_not_in: [String!]
  abstract_lt: String
  abstract_lte: String
  abstract_gt: String
  abstract_gte: String
  abstract_contains: String
  abstract_not_contains: String
  abstract_starts_with: String
  abstract_not_starts_with: String
  abstract_ends_with: String
  abstract_not_ends_with: String
  principalInvestigator: PersonWhereInput
  observations_every: ObservationWhereInput
  observations_some: ObservationWhereInput
  observations_none: ObservationWhereInput
  AND: [ProposalWhereInput!]
  OR: [ProposalWhereInput!]
  NOT: [ProposalWhereInput!]
}

input ProposalWhereUniqueInput {
  id: ID
}

type Query {
  dataFile(where: DataFileWhereUniqueInput!): DataFile
  dataFiles(where: DataFileWhereInput, orderBy: DataFileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DataFile]!
  dataFilesConnection(where: DataFileWhereInput, orderBy: DataFileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DataFileConnection!
  dataRequest(where: DataRequestWhereUniqueInput!): DataRequest
  dataRequests(where: DataRequestWhereInput, orderBy: DataRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DataRequest]!
  dataRequestsConnection(where: DataRequestWhereInput, orderBy: DataRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DataRequestConnection!
  dataRequestPart(where: DataRequestPartWhereUniqueInput!): DataRequestPart
  dataRequestParts(where: DataRequestPartWhereInput, orderBy: DataRequestPartOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DataRequestPart]!
  dataRequestPartsConnection(where: DataRequestPartWhereInput, orderBy: DataRequestPartOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DataRequestPartConnection!
  header(where: HeaderWhereUniqueInput!): Header
  headers(where: HeaderWhereInput, orderBy: HeaderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Header]!
  headersConnection(where: HeaderWhereInput, orderBy: HeaderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HeaderConnection!
  observation(where: ObservationWhereUniqueInput!): Observation
  observations(where: ObservationWhereInput, orderBy: ObservationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Observation]!
  observationsConnection(where: ObservationWhereInput, orderBy: ObservationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ObservationConnection!
  person(where: PersonWhereUniqueInput!): Person
  persons(where: PersonWhereInput, orderBy: PersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Person]!
  personsConnection(where: PersonWhereInput, orderBy: PersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PersonConnection!
  proposal(where: ProposalWhereUniqueInput!): Proposal
  proposals(where: ProposalWhereInput, orderBy: ProposalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Proposal]!
  proposalsConnection(where: ProposalWhereInput, orderBy: ProposalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProposalConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

enum Role {
  ADMIN
}

type Subscription {
  dataFile(where: DataFileSubscriptionWhereInput): DataFileSubscriptionPayload
  dataRequest(where: DataRequestSubscriptionWhereInput): DataRequestSubscriptionPayload
  dataRequestPart(where: DataRequestPartSubscriptionWhereInput): DataRequestPartSubscriptionPayload
  header(where: HeaderSubscriptionWhereInput): HeaderSubscriptionPayload
  observation(where: ObservationSubscriptionWhereInput): ObservationSubscriptionPayload
  person(where: PersonSubscriptionWhereInput): PersonSubscriptionPayload
  proposal(where: ProposalSubscriptionWhereInput): ProposalSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

enum Telescope {
  LESEDI
  SAAO_1_9
  SALT
}

type User {
  id: ID!
  familyName: String!
  givenName: String!
  username: String!
  email: String!
  affiliation: String!
  password: String!
  roles: [Role!]!
  passwordResetToken: String
  passwordResetTokenExpiry: DateTime
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  familyName: String!
  givenName: String!
  username: String!
  email: String!
  affiliation: String!
  password: String!
  roles: UserCreaterolesInput
  passwordResetToken: String
  passwordResetTokenExpiry: DateTime
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreaterolesInput {
  set: [Role!]
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  familyName_ASC
  familyName_DESC
  givenName_ASC
  givenName_DESC
  username_ASC
  username_DESC
  email_ASC
  email_DESC
  affiliation_ASC
  affiliation_DESC
  password_ASC
  password_DESC
  passwordResetToken_ASC
  passwordResetToken_DESC
  passwordResetTokenExpiry_ASC
  passwordResetTokenExpiry_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  familyName: String!
  givenName: String!
  username: String!
  email: String!
  affiliation: String!
  password: String!
  roles: [Role!]!
  passwordResetToken: String
  passwordResetTokenExpiry: DateTime
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  familyName: String
  givenName: String
  username: String
  email: String
  affiliation: String
  password: String
  roles: UserUpdaterolesInput
  passwordResetToken: String
  passwordResetTokenExpiry: DateTime
}

input UserUpdateInput {
  familyName: String
  givenName: String
  username: String
  email: String
  affiliation: String
  password: String
  roles: UserUpdaterolesInput
  passwordResetToken: String
  passwordResetTokenExpiry: DateTime
}

input UserUpdateManyMutationInput {
  familyName: String
  givenName: String
  username: String
  email: String
  affiliation: String
  password: String
  roles: UserUpdaterolesInput
  passwordResetToken: String
  passwordResetTokenExpiry: DateTime
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdaterolesInput {
  set: [Role!]
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  familyName: String
  familyName_not: String
  familyName_in: [String!]
  familyName_not_in: [String!]
  familyName_lt: String
  familyName_lte: String
  familyName_gt: String
  familyName_gte: String
  familyName_contains: String
  familyName_not_contains: String
  familyName_starts_with: String
  familyName_not_starts_with: String
  familyName_ends_with: String
  familyName_not_ends_with: String
  givenName: String
  givenName_not: String
  givenName_in: [String!]
  givenName_not_in: [String!]
  givenName_lt: String
  givenName_lte: String
  givenName_gt: String
  givenName_gte: String
  givenName_contains: String
  givenName_not_contains: String
  givenName_starts_with: String
  givenName_not_starts_with: String
  givenName_ends_with: String
  givenName_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  affiliation: String
  affiliation_not: String
  affiliation_in: [String!]
  affiliation_not_in: [String!]
  affiliation_lt: String
  affiliation_lte: String
  affiliation_gt: String
  affiliation_gte: String
  affiliation_contains: String
  affiliation_not_contains: String
  affiliation_starts_with: String
  affiliation_not_starts_with: String
  affiliation_ends_with: String
  affiliation_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  passwordResetToken: String
  passwordResetToken_not: String
  passwordResetToken_in: [String!]
  passwordResetToken_not_in: [String!]
  passwordResetToken_lt: String
  passwordResetToken_lte: String
  passwordResetToken_gt: String
  passwordResetToken_gte: String
  passwordResetToken_contains: String
  passwordResetToken_not_contains: String
  passwordResetToken_starts_with: String
  passwordResetToken_not_starts_with: String
  passwordResetToken_ends_with: String
  passwordResetToken_not_ends_with: String
  passwordResetTokenExpiry: DateTime
  passwordResetTokenExpiry_not: DateTime
  passwordResetTokenExpiry_in: [DateTime!]
  passwordResetTokenExpiry_not_in: [DateTime!]
  passwordResetTokenExpiry_lt: DateTime
  passwordResetTokenExpiry_lte: DateTime
  passwordResetTokenExpiry_gt: DateTime
  passwordResetTokenExpiry_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  username: String
  email: String
  passwordResetToken: String
}
