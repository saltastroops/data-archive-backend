type AggregateDataRequest {
  count: Int!
}

type AggregateDataRequestPart {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type DataRequest {
  id: ID!
  user: User!
  madeAt: DateTime!
  parts(where: DataRequestPartWhereInput, orderBy: DataRequestPartOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DataRequestPart!]
  url: String
}

type DataRequestConnection {
  pageInfo: PageInfo!
  edges: [DataRequestEdge]!
  aggregate: AggregateDataRequest!
}

input DataRequestCreateInput {
  id: ID
  user: UserCreateOneInput!
  madeAt: DateTime!
  parts: DataRequestPartCreateManyInput
  url: String
}

type DataRequestEdge {
  node: DataRequest!
  cursor: String!
}

enum DataRequestOrderByInput {
  id_ASC
  id_DESC
  madeAt_ASC
  madeAt_DESC
  url_ASC
  url_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DataRequestPart {
  id: ID!
  dataFiles: [String!]!
  status: DataRequestStatus!
  statusReason: String!
  uri: String
}

type DataRequestPartConnection {
  pageInfo: PageInfo!
  edges: [DataRequestPartEdge]!
  aggregate: AggregateDataRequestPart!
}

input DataRequestPartCreatedataFilesInput {
  set: [String!]
}

input DataRequestPartCreateInput {
  id: ID
  dataFiles: DataRequestPartCreatedataFilesInput
  status: DataRequestStatus
  statusReason: String
  uri: String
}

input DataRequestPartCreateManyInput {
  create: [DataRequestPartCreateInput!]
  connect: [DataRequestPartWhereUniqueInput!]
}

type DataRequestPartEdge {
  node: DataRequestPart!
  cursor: String!
}

enum DataRequestPartOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  statusReason_ASC
  statusReason_DESC
  uri_ASC
  uri_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DataRequestPartPreviousValues {
  id: ID!
  dataFiles: [String!]!
  status: DataRequestStatus!
  statusReason: String!
  uri: String
}

input DataRequestPartScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  status: DataRequestStatus
  status_not: DataRequestStatus
  status_in: [DataRequestStatus!]
  status_not_in: [DataRequestStatus!]
  statusReason: String
  statusReason_not: String
  statusReason_in: [String!]
  statusReason_not_in: [String!]
  statusReason_lt: String
  statusReason_lte: String
  statusReason_gt: String
  statusReason_gte: String
  statusReason_contains: String
  statusReason_not_contains: String
  statusReason_starts_with: String
  statusReason_not_starts_with: String
  statusReason_ends_with: String
  statusReason_not_ends_with: String
  uri: String
  uri_not: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_lt: String
  uri_lte: String
  uri_gt: String
  uri_gte: String
  uri_contains: String
  uri_not_contains: String
  uri_starts_with: String
  uri_not_starts_with: String
  uri_ends_with: String
  uri_not_ends_with: String
  AND: [DataRequestPartScalarWhereInput!]
  OR: [DataRequestPartScalarWhereInput!]
  NOT: [DataRequestPartScalarWhereInput!]
}

type DataRequestPartSubscriptionPayload {
  mutation: MutationType!
  node: DataRequestPart
  updatedFields: [String!]
  previousValues: DataRequestPartPreviousValues
}

input DataRequestPartSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DataRequestPartWhereInput
  AND: [DataRequestPartSubscriptionWhereInput!]
  OR: [DataRequestPartSubscriptionWhereInput!]
  NOT: [DataRequestPartSubscriptionWhereInput!]
}

input DataRequestPartUpdatedataFilesInput {
  set: [String!]
}

input DataRequestPartUpdateDataInput {
  dataFiles: DataRequestPartUpdatedataFilesInput
  status: DataRequestStatus
  statusReason: String
  uri: String
}

input DataRequestPartUpdateInput {
  dataFiles: DataRequestPartUpdatedataFilesInput
  status: DataRequestStatus
  statusReason: String
  uri: String
}

input DataRequestPartUpdateManyDataInput {
  dataFiles: DataRequestPartUpdatedataFilesInput
  status: DataRequestStatus
  statusReason: String
  uri: String
}

input DataRequestPartUpdateManyInput {
  create: [DataRequestPartCreateInput!]
  update: [DataRequestPartUpdateWithWhereUniqueNestedInput!]
  upsert: [DataRequestPartUpsertWithWhereUniqueNestedInput!]
  delete: [DataRequestPartWhereUniqueInput!]
  connect: [DataRequestPartWhereUniqueInput!]
  set: [DataRequestPartWhereUniqueInput!]
  disconnect: [DataRequestPartWhereUniqueInput!]
  deleteMany: [DataRequestPartScalarWhereInput!]
  updateMany: [DataRequestPartUpdateManyWithWhereNestedInput!]
}

input DataRequestPartUpdateManyMutationInput {
  dataFiles: DataRequestPartUpdatedataFilesInput
  status: DataRequestStatus
  statusReason: String
  uri: String
}

input DataRequestPartUpdateManyWithWhereNestedInput {
  where: DataRequestPartScalarWhereInput!
  data: DataRequestPartUpdateManyDataInput!
}

input DataRequestPartUpdateWithWhereUniqueNestedInput {
  where: DataRequestPartWhereUniqueInput!
  data: DataRequestPartUpdateDataInput!
}

input DataRequestPartUpsertWithWhereUniqueNestedInput {
  where: DataRequestPartWhereUniqueInput!
  update: DataRequestPartUpdateDataInput!
  create: DataRequestPartCreateInput!
}

input DataRequestPartWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  status: DataRequestStatus
  status_not: DataRequestStatus
  status_in: [DataRequestStatus!]
  status_not_in: [DataRequestStatus!]
  statusReason: String
  statusReason_not: String
  statusReason_in: [String!]
  statusReason_not_in: [String!]
  statusReason_lt: String
  statusReason_lte: String
  statusReason_gt: String
  statusReason_gte: String
  statusReason_contains: String
  statusReason_not_contains: String
  statusReason_starts_with: String
  statusReason_not_starts_with: String
  statusReason_ends_with: String
  statusReason_not_ends_with: String
  uri: String
  uri_not: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_lt: String
  uri_lte: String
  uri_gt: String
  uri_gte: String
  uri_contains: String
  uri_not_contains: String
  uri_starts_with: String
  uri_not_starts_with: String
  uri_ends_with: String
  uri_not_ends_with: String
  AND: [DataRequestPartWhereInput!]
  OR: [DataRequestPartWhereInput!]
  NOT: [DataRequestPartWhereInput!]
}

input DataRequestPartWhereUniqueInput {
  id: ID
}

type DataRequestPreviousValues {
  id: ID!
  madeAt: DateTime!
  url: String
}

enum DataRequestStatus {
  PENDING
  FAILED
  SUCCESSFUL
}

type DataRequestSubscriptionPayload {
  mutation: MutationType!
  node: DataRequest
  updatedFields: [String!]
  previousValues: DataRequestPreviousValues
}

input DataRequestSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DataRequestWhereInput
  AND: [DataRequestSubscriptionWhereInput!]
  OR: [DataRequestSubscriptionWhereInput!]
  NOT: [DataRequestSubscriptionWhereInput!]
}

input DataRequestUpdateInput {
  user: UserUpdateOneRequiredInput
  madeAt: DateTime
  parts: DataRequestPartUpdateManyInput
  url: String
}

input DataRequestUpdateManyMutationInput {
  madeAt: DateTime
  url: String
}

input DataRequestWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  madeAt: DateTime
  madeAt_not: DateTime
  madeAt_in: [DateTime!]
  madeAt_not_in: [DateTime!]
  madeAt_lt: DateTime
  madeAt_lte: DateTime
  madeAt_gt: DateTime
  madeAt_gte: DateTime
  parts_every: DataRequestPartWhereInput
  parts_some: DataRequestPartWhereInput
  parts_none: DataRequestPartWhereInput
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  AND: [DataRequestWhereInput!]
  OR: [DataRequestWhereInput!]
  NOT: [DataRequestWhereInput!]
}

input DataRequestWhereUniqueInput {
  id: ID
}

scalar DateTime

scalar Long

type Mutation {
  createDataRequest(data: DataRequestCreateInput!): DataRequest!
  updateDataRequest(data: DataRequestUpdateInput!, where: DataRequestWhereUniqueInput!): DataRequest
  updateManyDataRequests(data: DataRequestUpdateManyMutationInput!, where: DataRequestWhereInput): BatchPayload!
  upsertDataRequest(where: DataRequestWhereUniqueInput!, create: DataRequestCreateInput!, update: DataRequestUpdateInput!): DataRequest!
  deleteDataRequest(where: DataRequestWhereUniqueInput!): DataRequest
  deleteManyDataRequests(where: DataRequestWhereInput): BatchPayload!
  createDataRequestPart(data: DataRequestPartCreateInput!): DataRequestPart!
  updateDataRequestPart(data: DataRequestPartUpdateInput!, where: DataRequestPartWhereUniqueInput!): DataRequestPart
  updateManyDataRequestParts(data: DataRequestPartUpdateManyMutationInput!, where: DataRequestPartWhereInput): BatchPayload!
  upsertDataRequestPart(where: DataRequestPartWhereUniqueInput!, create: DataRequestPartCreateInput!, update: DataRequestPartUpdateInput!): DataRequestPart!
  deleteDataRequestPart(where: DataRequestPartWhereUniqueInput!): DataRequestPart
  deleteManyDataRequestParts(where: DataRequestPartWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  dataRequest(where: DataRequestWhereUniqueInput!): DataRequest
  dataRequests(where: DataRequestWhereInput, orderBy: DataRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DataRequest]!
  dataRequestsConnection(where: DataRequestWhereInput, orderBy: DataRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DataRequestConnection!
  dataRequestPart(where: DataRequestPartWhereUniqueInput!): DataRequestPart
  dataRequestParts(where: DataRequestPartWhereInput, orderBy: DataRequestPartOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DataRequestPart]!
  dataRequestPartsConnection(where: DataRequestPartWhereInput, orderBy: DataRequestPartOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DataRequestPartConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

enum Role {
  ADMIN
}

type Subscription {
  dataRequest(where: DataRequestSubscriptionWhereInput): DataRequestSubscriptionPayload
  dataRequestPart(where: DataRequestPartSubscriptionWhereInput): DataRequestPartSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  familyName: String!
  givenName: String!
  username: String!
  email: String!
  affiliation: String!
  password: String!
  roles: [Role!]!
  passwordResetToken: String
  passwordResetTokenExpiry: DateTime
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  familyName: String!
  givenName: String!
  username: String!
  email: String!
  affiliation: String!
  password: String!
  roles: UserCreaterolesInput
  passwordResetToken: String
  passwordResetTokenExpiry: DateTime
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreaterolesInput {
  set: [Role!]
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  familyName_ASC
  familyName_DESC
  givenName_ASC
  givenName_DESC
  username_ASC
  username_DESC
  email_ASC
  email_DESC
  affiliation_ASC
  affiliation_DESC
  password_ASC
  password_DESC
  passwordResetToken_ASC
  passwordResetToken_DESC
  passwordResetTokenExpiry_ASC
  passwordResetTokenExpiry_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  familyName: String!
  givenName: String!
  username: String!
  email: String!
  affiliation: String!
  password: String!
  roles: [Role!]!
  passwordResetToken: String
  passwordResetTokenExpiry: DateTime
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  familyName: String
  givenName: String
  username: String
  email: String
  affiliation: String
  password: String
  roles: UserUpdaterolesInput
  passwordResetToken: String
  passwordResetTokenExpiry: DateTime
}

input UserUpdateInput {
  familyName: String
  givenName: String
  username: String
  email: String
  affiliation: String
  password: String
  roles: UserUpdaterolesInput
  passwordResetToken: String
  passwordResetTokenExpiry: DateTime
}

input UserUpdateManyMutationInput {
  familyName: String
  givenName: String
  username: String
  email: String
  affiliation: String
  password: String
  roles: UserUpdaterolesInput
  passwordResetToken: String
  passwordResetTokenExpiry: DateTime
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdaterolesInput {
  set: [Role!]
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  familyName: String
  familyName_not: String
  familyName_in: [String!]
  familyName_not_in: [String!]
  familyName_lt: String
  familyName_lte: String
  familyName_gt: String
  familyName_gte: String
  familyName_contains: String
  familyName_not_contains: String
  familyName_starts_with: String
  familyName_not_starts_with: String
  familyName_ends_with: String
  familyName_not_ends_with: String
  givenName: String
  givenName_not: String
  givenName_in: [String!]
  givenName_not_in: [String!]
  givenName_lt: String
  givenName_lte: String
  givenName_gt: String
  givenName_gte: String
  givenName_contains: String
  givenName_not_contains: String
  givenName_starts_with: String
  givenName_not_starts_with: String
  givenName_ends_with: String
  givenName_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  affiliation: String
  affiliation_not: String
  affiliation_in: [String!]
  affiliation_not_in: [String!]
  affiliation_lt: String
  affiliation_lte: String
  affiliation_gt: String
  affiliation_gte: String
  affiliation_contains: String
  affiliation_not_contains: String
  affiliation_starts_with: String
  affiliation_not_starts_with: String
  affiliation_ends_with: String
  affiliation_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  passwordResetToken: String
  passwordResetToken_not: String
  passwordResetToken_in: [String!]
  passwordResetToken_not_in: [String!]
  passwordResetToken_lt: String
  passwordResetToken_lte: String
  passwordResetToken_gt: String
  passwordResetToken_gte: String
  passwordResetToken_contains: String
  passwordResetToken_not_contains: String
  passwordResetToken_starts_with: String
  passwordResetToken_not_starts_with: String
  passwordResetToken_ends_with: String
  passwordResetToken_not_ends_with: String
  passwordResetTokenExpiry: DateTime
  passwordResetTokenExpiry_not: DateTime
  passwordResetTokenExpiry_in: [DateTime!]
  passwordResetTokenExpiry_not_in: [DateTime!]
  passwordResetTokenExpiry_lt: DateTime
  passwordResetTokenExpiry_lte: DateTime
  passwordResetTokenExpiry_gt: DateTime
  passwordResetTokenExpiry_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  username: String
  email: String
  passwordResetToken: String
}
